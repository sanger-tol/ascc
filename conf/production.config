/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow production config file for running production work for sanger-tol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run sanger-tol/ascc -profile sanger-tol,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

process {
    // Adding the module info here
    // stopped the resources from base.config
    // from being used, and causes the job
    // to only use the defaulted process_* tag
    // which is just not enough for FCS_GX
    // TODO
    // Allowing it to use default resources, stops it showing up in LSF?
    withName: FCSGX_RUNGX {
        container   = ""
        module      = ""
        //module      = "fcs-gx/farm/0.5.5"
        cpus        = { 32      }
        memory      = { 520.GB  }
        time        = { 12.h    }
    }

    withName: SANGER_TOL_BTK {
        queue       = "oversubscribed"
        cpus        = { 2 }
        memory      = { 1200.MB * task.attempt  }
        time        = { 96.h    * task.attempt  }
    }

    withName: "FCS_FCSADAPTOR_EUK|FCS_FCSADAPTOR_PROK" {
        clusterOptions = "-R \"rusage[tmp=10]\""
    }

}

params {
    config_profile_name                 = 'Sanger-ToL Production Profile'
    config_profile_description          = 'Production profile for Sanger-ToL infrastructure to make make lives easier!'

    // all available methods
    // "pca,umap,t-sne,isomap,lle_standard,lle_hessian,lle_modified,mds,se,random_trees,kernel_pca,pca_svd,autoencoder_sigmoid,autoencoder_linear,autoencoder_selu,autoencoder_relu,nmf"

    // Effectively replaces the Static.config
    pacbio_barcode_file                 = "${projectDir}/assets/ascc_database_fasta/pacbio_adaptors.fa"

    kmer_length                         = 7
    nt_database_path                    = "/lustre/scratch122/tol/resources/nt/latest/"
    nt_database_prefix                  = "nt"
    nt_kraken_database_path             = "/lustre/scratch122/tol/resources/nt_kraken2/latest"
    ncbi_taxonomy_path                  = "/lustre/scratch122/tol/resources/taxonomy/latest/new_taxdump"
    ncbi_ranked_lineage_path            = "/lustre/scratch122/tol/resources/taxonomy/latest/new_taxdump/rankedlineage.dmp"
    busco_lineages_folder               = "/lustre/scratch122/tol/resources/busco/latest/"

    fcs_gx_database_path                = "/tmp/tol_data/fcs-gx/2023-01-24/"
    vecscreen_database_path             = "/lustre/scratch122/tol/resources/ascc_vecscreen/"
    diamond_uniprot_database_path       = "/lustre/scratch122/tol/resources/uniprot_reference_proteomes/latest/reference_proteomes.dmnd"
    diamond_nr_database_path            = "/lustre/scratch122/tol/resources/nr/latest/nr.dmnd"
    seqkit_sliding                      = 100000
    seqkit_window                       = 6000
    n_neighbours                        = 13
    filter_cutoff                       = 1000000000

    // These are the internally agreed upon subworkflows which are used
    // for sanger decontamination.
    run_essentials                      = "both"
    run_kmers                           = "off"         //genomic
    run_tiara                           = "both"
    run_coverage                        = "both"
    run_nt_blast                        = "off"         //both
    run_nr_diamond                      = "off"         //both
    run_uniprot_diamond                 = "off"         //both
    run_kraken                          = "off"         //both
    run_fcsgx                           = "both"        //both
    run_fcs_adaptor                     = "both"        //both
    run_vecscreen                       = "both"        //both
    run_btk_busco                       = "genomic"     //genomic
    run_pacbio_barcodes                 = "both"        //both
    run_organellar_blast                = "genomic"
    run_autofilter_assembly             = "both"
    run_create_btk_dataset              = "both"
    run_merge_datasets                  = "genomic"      //genomic

}
