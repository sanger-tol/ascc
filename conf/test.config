/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run sanger-tol/ascc -profile test,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    withName: 'MINIMAP2_ALIGN_SE' {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 8.GB, 'memory' ) }
        time   = { check_max( 1.h, 'time' ) }
    }

    withName: 'BLAST_MAKEBLASTDB' {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 4.GB, 'memory' ) }
        time   = { check_max( 1.h, 'time' ) }
    }
}

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 1
    max_memory = '8.GB'
    max_time   = '6.h'

    // Input params
    outdir                              s= "ASCC-TEST"
    include                             = "ALL"
    exclude                             = "btk_busco"

    // Input data normally in
    reads_path                          = ["/home/runner/work/ascc/ascc/asccTinyTest_V2/pacbio/Pyoeliiyoelii17XNL_pbtools_simulated_pacbio_reads.fa.gz"]
    reads_type                          = "hifi"
    pacbio_barcode_file                 = "/home/runner/work/ascc/ascc/assets/pacbio_adaptors.fa"
    pacbio_barcode_names                = "bc2001,bc2009"
    scientific_name                     = "Plasmodium yoelii yoelii 17XNL"
    taxid                               = 352914
    kmer_length                         = 7
    dimensionality_reduction_methods    = ["pca", "random_trees"]
    // all available methods
    // "pca,umap,t-sne,isomap,lle_standard,lle_hessian,lle_modified,mds,se,random_trees,kernel_pca,pca_svd,autoencoder_sigmoid,autoencoder_linear,autoencoder_selu,autoencoder_relu,nmf"
    nt_database_path                    = "/home/runner/work/ascc/ascc/blastdb/"
    nt_database_prefix                  = "tiny_plasmodium_blastdb.fa"
    nt_kraken_database_path             = "/home/runner/work/ascc/ascc/kraken2/kraken2"
    ncbi_accession_ids_folder           = "/home/runner/work/ascc/ascc/20240709_tiny_accession2taxid/"
    ncbi_taxonomy_path                  = "/home/runner/work/ascc/ascc/ncbi_taxdump/"
    ncbi_ranked_lineage_path            = "/home/runner/work/ascc/ascc/ncbi_taxdump/rankedlineage.dmp"
    busco_lineages_folder               = "/home/runner/work/ascc/ascc/busco_database/"
    busco_lineages                      = "diptera_odb10,insecta_odb10"
    fcs_gx_database_path                = "/home/runner/work/ascc/ascc/FCS_gx/="
    diamond_uniprot_database_path       = "/home/runner/work/ascc/ascc/diamond.dmnd"
    diamond_nr_database_path            = "/home/runner/work/ascc/ascc/diamond.dmnd"
    vecscreen_database_path             = "/home/runner/work/ascc/ascc/vecscreen/"
    seqkit_sliding                      = 100000
    seqkit_window                       = 6000
    n_neighbours                        = 13

}
