/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/ascc Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { 1      * task.attempt        }
    memory = { 6.GB   * task.attempt        }
    time   = { 4.h    * task.attempt        }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'


    // PIPELINE NESTING
    withName: 'SANGER_TOL_BTK|SANGER_TOL_BTK_CASCADE' {
        time    = { 48.h    * task.attempt    }
    }

    // BLAST RELATED MODULES WHICH WILL NEED THE MOST RESOURCES
    // TIME IS STOLEN FROM SANGER-TOL/BLOBTOOLKIT
    withName: 'BLAST_BLASTN|BLAST_BLASTN_MOD|DIAMOND_BLASTX' {
        cpus    = { 16                          }
        memory  = { 50.GB    * task.attempt     }
        time    = { 48.h    * task.attempt      }
    }


    withName: 'PACBIO_BARCODE_CHECK:BLAST_BLASTN' {
        cpus    = { 16                          }
        memory  = { 50.GB    * task.attempt     }
        time    = { 16.h     * task.attempt     }
    }


    // FCS REQUIRES LOADING THE WHOLE FCS DB INTO MEMORY AT ONE TIME
    withName: 'FCSGX_RUNGX' {
        cpus    = { 32                          }
        memory  = { 400.GB    * task.attempt    }
        time    = { 48.h      * task.attempt    }
    }


    withName: 'MINIMAP2_ALIGN_SE' {
        cpus   = { 16       * task.attempt      }
        memory = { 2.GB     * ( reference.size() < 2e9 ? 70 : Math.ceil( ( reference.size() / 1e+9 ) * 50 ) * Math.ceil( task.attempt * 1 ) ) }
        time   = { 22.h     * task.attempt      }
    }

    // SAMTOOLS MODULES WILL NEED A REVISIT DUE, THESE ARE DEFAULTS
    // IN CASES WHERE THERE IS ONE HIC FILE THIS WILL NEED ALMOST NOTHING
    withName:SAMTOOLS_MERGE {
        cpus    = { 16                          }
        memory  = { 50.GB     * task.attempt    }
    }

    withName:SAMTOOLS_INDEX {
        cpus    = { 16                          }
        memory  = { 50.GB     * task.attempt    }
    }

    withName:SAMTOOLS_SORT {
        cpus    = { 16                          }
        memory  = { 50.GB     * task.attempt    }
    }

    withName:SAMTOOLS_VIEW {
        cpus    = { 16                          }
        memory  = { 50.GB     * task.attempt    }
    }

    withName:SAMTOOLS_DEPTH {
        cpus    = { 16                          }
        memory  = { 50.GB     * task.attempt    }
    }

    // PYTHON BASED MODULES WHICH SHOULDN'T NEED MORE THAN 1 CORE AND A MIDDLING AMOUNT OF MEMORY
    // WILL BE REVIEWED
    withName: 'VALIDATE_TAXID|TRAILINGNS|GET_KMERS_PROFILE|GC_CONTENT|PARSE_FCSGX_RESULT|ASCC_MERGE_TABLES|GET_LARGEST_SCAFF|KMER_COUNT_DIM_REDUCTION|KMER_COUNT_DIM_REDUCTION_COMBINE_CSV|REFORMAT_DIAMOND_OUTFMT6|CONVERT_TO_HITS_FILE|DIAMOND_BLAST_CHUNK_TO_FULL|GENERATE_SAMPLESHEET' {
        cpus    = { 1                           }
        memory  = { 10.GB    * task.attempt     }
        time    = { 5.h      * task.attempt     }
    }

    withName: "GET_KMER_COUNTS" {
        cpus    = { 1                           }
        memory  = { Math.ceil(fasta.size() / 1e9 + 1e9) * 1.GB * task.attempt }
        time    = { 5.h      * task.attempt     }
    }

    withName:KRAKEN2_KRAKEN2 {
        // Scalling based on the size of the input genome.
        cpus   = { 12        * task.attempt     }
        memory = { 72.GB     * task.attempt     }
        time   = { 16.h      * task.attempt     }
    }


    // Process-specific resource requirements
    // NOTE - Please try and reuse the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { 1                   }
        memory = { 6.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }

    withLabel:process_low {
        cpus   = { 2     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withLabel:process_medium {
        cpus   = { 6     * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }

    withLabel:process_high {
        cpus   = { 12    * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }

    withLabel:process_long {
        time   = { 20.h  * task.attempt }
    }

    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
