/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: SANGER_TOL_BTK {
        ext.args            = ""
        ext.profiles        = "singularity,sanger"
        ext.get_versions    = "lsid | head -n1 | cut -d ',' -f 1"
        ext.version         = "0.7.1"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/sanger-tol-btk" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: SANGER_TOL_BTK_CASCADE {
        ext.args            = ""
        ext.profiles        = "singularity,sanger"
        ext.get_versions    = "lsid | head -n1 | cut -d ',' -f 1"
        ext.version         = "0.7.1"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/sanger-tol-btk-cascade" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: "ORGANELLE_CONTAMINATION_RECOMMENDATIONS|FILTER_BARCODE|SUMMARISE_VECSCREEN_OUTPUT" {
        publishDir      = [
            path: { "${params.outdir}/${meta.id}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    // Modified output based on feedback
    // BELOW
    withName:"TIARA_TIARA" {
        publishDir      = [
            path: { "${params.outdir}/${meta.id}/TIARA-RAW" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: "SAMTOOLS_SORT" {
        publishDir      = [
            path:   { "${params.outdir}/${meta.id}/SORTED_MAPPED_BAM/"},
            mode:   params.publish_dir_mode,
            pattern:["*.bam"],
            overwrite: true
        ]
    }

    withName: "SAMTOOLS_DEPTH_AVERAGE_COVERAGE" {
        publishDir = [
            path:   { "${params.outdir}/${meta.id}/AVG_COVERAGE/"},
            mode:   params.publish_dir_mode,
            overwrite: true
        ]
    }
    // ABOVE

    withName: "FCS_FCSADAPTOR_EUK|FCS_FCSADAPTOR_PROK" {
        publishDir      = [
            path: { "${params.outdir}/${meta.id}/FCS-adaptor" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: AUTOFILTER_AND_CHECK_ASSEMBLY {
        publishDir      = [
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: "autofiltering_done_indicator_file.txt",
                overwrite: true
            ],
            [
                path:   { "${params.outdir}/${meta.id}/autofilter/"},
                mode:   params.publish_dir_mode,
                pattern:["*.fasta", "*.txt", "*csv"],
                overwrite: true
            ]
        ]
    }

    withName: ASCC_MERGE_TABLES {
        publishDir      = [
            path: { "${params.outdir}/${meta.id}/ASCC-main-output" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: MERGE_BTK_DATASETS {
        publishDir  = [
            path: { "${params.outdir}/${meta.id}/merged_tables/" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: CREATE_BTK_DATASET {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/create_btk_dataset" },
            mode: params.publish_dir_mode,
            overwrite: true
        ]
    }

    withName: FILTER_FASTA {
        ext.args        = "--low_pass --remove_original_fasta"
        ext.cutoff      = 1900000000
    }

    withName: SEQKIT_SLIDING {
        ext.args        = {"-s ${meta.sliding} -W ${meta.window} "}
    }

    withName: '.*:.*:EXTRACT_NT_BLAST:BLAST_CHUNK_TO_FULL' {
        ext.args        = "nucleotide"
    }

    withName: '.*:.*:NR_DIAMOND:DIAMOND_BLAST_CHUNK_TO_FULL' {
        ext.args        = "diamond"
    }

    withName: '.*:.*:NR_DIAMOND:CONVERT_TO_HITS_FILE' {
        ext.args        = "nr"
    }

    withName: '.*:.*:UP_DIAMOND:DIAMOND_BLAST_CHUNK_TO_FULL' {
        ext.args        = "diamond"
    }

    withName: '.*:.*:UP_DIAMOND:CONVERT_TO_HITS_FILE' {
        ext.args        = "Uniprot"
    }

    withName: BLAST_MAKEBLASTDB {
        ext.args        = { "-dbtype nucl" }
    }

    withName: '.*:.*:BLAST_BLASTN' {
        ext.args        = { '-outfmt "6 qseqid staxids bitscore std" -max_target_seqs 10 -max_hsps 1 -evalue 1e-25 -dust yes -lcase_masking' }
        ext.prefix      = { "ascc-${meta2.id}" }
        ext.dbprefix    = '*'
    }

    withName: DIAMOND_BLASTX {
        ext.args        = { "--sensitive --max-target-seqs 3 --evalue 1e-25 --no-unlink --tmpdir ./" }
    }

    withName: '.*:EXTRACT_NT_BLAST:BLAST_BLASTN_MOD' {
        ext.args        = { '-outfmt "6 qseqid staxids bitscore std" -max_target_seqs 10 -max_hsps 1 -evalue 1e-25 -dust yes -lcase_masking' }
        ext.dbprefix    = { "${meta2.id}" }
    }

    withName: '.*:.*:(PLASTID_ORGANELLAR_BLAST|MITO_ORGANELLAR_BLAST):BLAST_BLASTN' {
        ext.args        = { "-task megablast -word_size 28 -best_hit_overhang 0.1 -best_hit_score_edge 0.1 -dust yes -evalue 0.0001 -perc_identity 80 -soft_masking true -outfmt 7" }
    }

    withName: SAMTOOLS_DEPTH{
        ext.args        = { "-aa" }
    }

    withName: SAMTOOLS_SORT{
        ext.prefix      = { "${meta.id}_sorted" }
    }

    withName: KRAKEN2_KRAKEN2 {
        ext.args        = { "--report-zero-counts --use-names --memory-mapping" }
        publishDir      = [
            path: { "${params.outdir}/${meta.id}/KRAKEN2" },
            mode: params.publish_dir_mode
        ]
    }

    withName: GET_LINEAGE_FOR_KRAKEN {
        publishDir      = [
            path: { "${params.outdir}/${meta.id}/KRAKEN2" },
            mode: params.publish_dir_mode
        ]
    }

    withName: FCS_FCSADAPTOR_PROK {
        ext.args        = "--prok"
        ext.prefix      = { "${meta.id}_prok" }
    }

    withName: FCS_FCSADAPTOR_EUK {
        ext.args        = "--euk"
        ext.prefix      = { "${meta.id}_euk" }
    }

    withName: SED_SED {
        ext.prefix      = { "${meta.id}_fixed" }
        ext.args        = " -e '/>/s/ //g' "
    }

    withName: '.*:.*:GENERATE_GENOME:GNU_SORT' {
        ext.prefix      = { "${meta.id}_sorted"}
        ext.args        = { '-k2,2 -nr' }
    }

    withName: MINIMAP2_ALIGN_SE {
        ext.args        = {'-ax '+ (meta.readtype.equals("hifi") ? "map-hifi" : meta.readtype.equals("clr") ? "map-pb" : meta.readtype.equals("ont") ? "map-ont" : "") + ' --cs=short' + (reference.size() > 2e9 ? " -I8g" : "") }
        ext.prefix      = { "${meta.id}_alignment_${reference.getName().tokenize('.')[0]}" }
    }

    withName: MINIMAP2_ALIGN_ILLUMINA {
        ext.args        = { '-ax sr --cs=short' + (reference.size() > 4294967296 ? (" -I" + Math.ceil(reference.size()/1073741824)+"G") : "") }
        ext.prefix      = { "${meta.id}_alignment_${reference.getName().tokenize('.')[0]}" }
    }

    withName: NCBITOOLS_VECSCREEN {
        ext.args        = { "-f3" }
    }

    withName: FILTER_VECSCREEN_RESULTS {
        ext.args        =   "--skip_reporting_suspect_hits --skip_reporting_weak_hits --skip_reporting_no_hits"
    }
}
