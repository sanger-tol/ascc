Changes in component 'nf-core/fcsgx/rungx'
'modules/nf-core/fcsgx/rungx/meta.yml' is unchanged
'modules/nf-core/fcsgx/rungx/environment.yml' is unchanged
Changes in 'fcsgx/rungx/main.nf':
--- modules/nf-core/fcsgx/rungx/main.nf
+++ modules/nf-core/fcsgx/rungx/main.nf
@@ -8,9 +8,10 @@
         'biocontainers/ncbi-fcs-gx:0.5.5--h9948957_0' }"
 
     input:
-    tuple val(meta), val(taxid), path(fasta)
+    tuple val(meta), path(fasta)
     path gxdb
-    val ramdisk_path
+    path ramdisk_path
+    val production_mode
 
     output:
     tuple val(meta), path("*.fcs_gx_report.txt"), emit: fcsgx_report
@@ -25,27 +26,60 @@
     script:
     def args = task.ext.args ?: ''
     def prefix = task.ext.prefix ?: "${meta.id}"
-    def mv_database_to_ram = ramdisk_path ? "rclone copy $gxdb $ramdisk_path/$task.index/" : ''
-    def database = ramdisk_path ? "$ramdisk_path/$task.index/" : gxdb // Use task.index to make memory location unique
-    """
-    # Copy DB to RAM-disk when supplied. Otherwise, the tool is very slow.
-    $mv_database_to_ram
+    def module_name = task.ext.module_name ?: ""
 
-    export GX_NUM_CORES=${task.cpus}
-    run_gx.py \\
-        --fasta ${fasta} \\
-        --gx-db ${database} \\
-        --tax-id ${taxid} \\
-        --generate-logfile true \\
-        --out-basename ${prefix} \\
-        --out-dir . \\
-        ${args}
+    // At Sanger we have a permenant home for the DB on NVME storage
+    // def mv_database_to_ram = ramdisk_path ? "rclone copy $gxdb $ramdisk_path/$task.index/" : ''
+    // def database = ramdisk_path ? "$ramdisk_path/$task.index/" : gxdb // Use task.index to make memory location unique
+    def database = ramdisk_path ?: gxdb
 
-    cat <<-END_VERSIONS > versions.yml
-    "${task.process}":
-        fcsgx: \$( gx --help | sed '/build/!d; s/.*:v//; s/-.*//' )
-    END_VERSIONS
-    """
+    if ( production_mode ) {
+        // Using just the module is not enough
+        // Due to how non-user processes set off the module at Sanger
+        // We need to create a module config and source it to work
+        // see: https://github.com/nextflow-io/nextflow/issues/5980
+        """
+        echo "Using Production FCSGX with local module"
+
+        modulecmd bash load ${module_name} > .module_def
+        source .module_def
+
+        export GX_NUM_CORES=${task.cpus}
+        export GX_INSTANTIATE_FASTA=1
+
+        run_gx \\
+            --fasta ${fasta} \\
+            --gx-db ${database} \\
+            --tax-id ${meta.taxid} \\
+            --generate-logfile true \\
+            --out-basename ${prefix} \\
+            --out-dir . \\
+            ${args}
+
+        cat <<-END_VERSIONS > versions.yml
+        "${task.process}":
+            fcsgx: \$( gx --help | sed '/build/!d; s/.*:v//; s/;.*//' )
+        END_VERSIONS
+        """
+    } else {
+        """
+        echo "Using Standard FCSGX with container"
+
+        run_gx.py \\
+            --fasta ${fasta} \\
+            --gx-db ${database} \\
+            --tax-id ${meta.taxid} \\
+            --generate-logfile true \\
+            --out-basename ${prefix} \\
+            --out-dir . \\
+            ${args}
+
+        cat <<-END_VERSIONS > versions.yml
+        "${task.process}":
+            fcsgx: \$( gx --help | sed '/build/!d; s/.*:v//; s/;.*//' )
+        END_VERSIONS
+        """
+    }
 
     stub:
     // def args = task.ext.args ?: ''
@@ -58,7 +92,7 @@
 
     cat <<-END_VERSIONS > versions.yml
     "${task.process}":
-        fcsgx: \$( gx --help | sed '/build/!d; s/.*:v//; s/-.*//' )
+        fcsgx: \$( gx --help | sed '/build/!d; s/.*:v//; s/;.*//' )
     END_VERSIONS
     """
 }

'modules/nf-core/fcsgx/rungx/tests/main.nf.test' is unchanged
'modules/nf-core/fcsgx/rungx/tests/main.nf.test.snap' is unchanged
************************************************************
