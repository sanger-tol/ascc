<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ASCC run report</title>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.css" />
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
  
    <script src="https://code.jquery.com/jquery-3.6.4.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.js"></script>
    
    <style>
        /* Base styles */
        body {
            font-family: sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9f9f9;
        }

        /* Headers */
        h1, h2, h3 {
            color: #2c5282; /* Dark blue */
            margin-top: 1.5em;
            border-bottom: 1px solid #e2e8f0;
            padding-bottom: 0.3em;
        }

        h1 {
            text-align: center;
            font-size: 2em;
            margin-top: 0.5em;
            margin-bottom: 0.2em;
        }
        
        .subtitle {
            text-align: center;
            font-size: 1.5em;
            margin-top: 0;
            margin-bottom: 1.5em;
            border-bottom: none;
            color: #4a5568;
        }

        /* Tables */
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 1em 0;
            font-family: Consolas, Monaco, 'Courier New', monospace;
            font-size: 0.9em;
            border: 1px solid #e2e8f0;
        }

        th {
            background-color: #edf2f7;
            color: #2c5282;
            font-weight: bold;
            text-align: left;
            padding: 8px;
            border: 1px solid #e2e8f0;
        }

        td {
            padding: 8px;
            border: 1px solid #e2e8f0;
        }

        tr:nth-child(even) {
            background-color: #f7fafc;
        }

        tr:hover {
            background-color: #ebf4ff;
        }

        /* Tabs styling */
        #tabs {
            background-color: #f9f9f9;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        #tabs .ui-tabs-nav {
            background-color: #edf2f7;
            border-bottom: 1px solid #e2e8f0;
            border-radius: 5px 5px 0 0;
            padding: 0.5em 0.5em 0;
        }

        #tabs .ui-tabs-nav li {
            margin: 0.2em 0.2em 0 0;
            border-radius: 5px 5px 0 0;
        }

        #tabs .ui-tabs-nav li a {
            color: #2c5282;
            padding: 0.5em 1em;
        }

        #tabs .ui-tabs-nav li.ui-tabs-active {
            background-color: #fff;
            border-bottom-color: #fff;
        }

        #tabs .ui-tabs-nav li.ui-tabs-active a {
            color: #2c5282;
            font-weight: bold;
        }

        #tabs .ui-tabs-panel {
            padding: 1em;
            background-color: #fff;
        }
        
        /* Nested tabs styling for K-mer methods */
        #kmer-methods-tabs {
            margin-top: 20px;
            background-color: #f9f9f9;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
        }
        
        #kmer-methods-tabs .ui-tabs-nav {
            background-color: #edf2f7;
            border-bottom: 1px solid #e2e8f0;
            border-radius: 5px 5px 0 0;
            padding: 0.5em 0.5em 0;
        }
        
        #kmer-methods-tabs .ui-tabs-nav li {
            margin: 0.2em 0.2em 0 0;
            border-radius: 5px 5px 0 0;
            font-size: 0.9em;
        }
        
        #kmer-methods-tabs .ui-tabs-nav li a {
            color: #2c5282;
            padding: 0.4em 0.8em;
        }
        
        #kmer-methods-tabs .ui-tabs-nav li.ui-tabs-active {
            background-color: #fff;
            border-bottom-color: #fff;
        }
        
        #kmer-methods-tabs .ui-tabs-panel {
            padding: 1em;
            background-color: #fff;
        }
        
        /* Disabled tab styling */
        #tabs .ui-tabs-nav li.ui-state-disabled {
            opacity: 0.6;
            background-color: #f0f0f0;
        }

        #tabs .ui-tabs-nav li.ui-state-disabled a {
            color: #8898aa !important; /* Lighter color for disabled tabs */
            cursor: not-allowed;
        }

        /* Add a visual indicator that the tab is disabled */
        #tabs .ui-tabs-nav li.ui-state-disabled:after {
            content: " (no data)";
            font-size: 0.8em;
            color: #8898aa;
        }

        /* Footer */
        .footer {
            margin-top: 30px;
            padding-top: 10px;
            border-top: 1px solid #e2e8f0;
            text-align: center;
            font-size: 0.8em;
            color: #718096;
        }

        /* DataTables customization */
        .dataTables_wrapper .dataTables_length, 
        .dataTables_wrapper .dataTables_filter, 
        .dataTables_wrapper .dataTables_info, 
        .dataTables_wrapper .dataTables_processing, 
        .dataTables_wrapper .dataTables_paginate {
            color: #4a5568;
            font-family: sans-serif;
            margin-bottom: 10px;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button.current {
            background: #edf2f7;
            border-color: #e2e8f0;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
            background: #e2e8f0;
            border-color: #cbd5e0;
        }

        /* Section anchors for navigation */
        section {
            scroll-margin-top: 20px;
        }
        
        /* Method tabs styling */
        .method-tab {
            margin-bottom: 30px;
            padding: 15px;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            background-color: #f8fafc;
        }
        
        .method-header {
            background-color: #edf2f7;
            padding: 10px;
            margin: -15px -15px 15px -15px;
            border-radius: 5px 5px 0 0;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .method-name {
            color: #2c5282;
            margin: 0;
        }
        
        .result-section {
            margin-top: 20px;
            padding-top: 10px;
            border-top: 1px dashed #e2e8f0;
        }
        
        /* Force horizontal scrolling for tables that need it */
        .table-responsive {
            width: 100%;
            overflow-x: auto; /* Use auto instead of scroll to only show scrollbar when needed */
            display: block;
            margin-bottom: 1em;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            padding-bottom: 15px; /* Space for scrollbar */
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on touch devices */
        }

        /* Make table wider than container to force scrolling for specific tables */
        .table-responsive table {
            width: 100%; /* Default to 100% width */
            margin-bottom: 0;
        }
        
        /* Special styling for FASTA sanitation tables */
        .fasta-sanitation-table {
            width: 100%;
            margin-bottom: 1em;
        }
        
        .fasta-sanitation-table table {
            width: 100%;
            margin-bottom: 0;
        }
        
        /* Alert styling */
        .alert-danger, .alert-success {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        
        .alert-danger {
            background-color: #fed7d7;
            color: #9b2c2c;
            border: 1px solid #f56565;
        }
        
        .alert-success {
            background-color: #c6f6d5;
            color: #276749;
            border: 1px solid #48bb78;
        }

        /* Outer container for additional structure */
        .outer-container {
            width: 100%;
            position: relative;
        }

        /* Table wrapper for proper overflow handling */
        .table-wrapper {
            overflow-x: visible;
            min-width: 100%;
        }

        /* Ensure DataTables doesn't break the container */
        .dataTables_wrapper {
            width: 100%;
            overflow: visible;
        }
        
        /* Explicit striped rows styling */
        .table-striped > tbody > tr:nth-of-type(odd) {
            background-color: #f7fafc;
        }

        .table-striped > tbody > tr:nth-of-type(even) {
            background-color: #ffffff;
        }

        /* Ensure DataTables doesn't override our striping */
        .dataTables_wrapper .table-striped > tbody > tr:nth-of-type(odd) {
            background-color: #f7fafc !important;
        }

        .dataTables_wrapper .table-striped > tbody > tr:nth-of-type(even) {
            background-color: #ffffff !important;
        }
        
        /* Visualization styling */
        .visualization-container {
            max-width: 600px;
            margin: 0 auto;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            padding: 10px;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .visualization-image {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 0 auto;
        }
        
        /* Pre tag styling for code blocks */
        pre {
            white-space: pre-wrap;       /* Since CSS 2.1 */
            word-wrap: break-word;       /* Internet Explorer 5.5+ */
            overflow-x: auto;            /* Add horizontal scrollbar if needed */
            max-width: 100%;             /* Ensure it doesn't exceed container width */
            background-color: #f8f8f8;   /* Light gray background */
            padding: 10px;               /* Add some padding */
            border-radius: 4px;          /* Rounded corners */
            border: 1px solid #e2e8f0;   /* Light border */
        }
        
        code {
            font-family: Consolas, Monaco, 'Courier New', monospace;
            font-size: 0.9em;
        }
    </style>
  
    <script>
    $(document).ready( function () {
        // Initialize main tabs
        $("#tabs").tabs();
        
        // Disable empty tabs
        for (var i = 0; i < emptyTabs.length; i++) {
            $("#tabs").tabs("disable", emptyTabs[i]);
        }
        
        // Initialize K-mer method tabs (if K-mer tab is not disabled)
        if (!emptyTabs.includes(8)) {
            $("#kmer-methods-tabs").tabs();
        }
        
        // Initialize DataTables with horizontal scrolling enabled
        $('#cobiont_check_merged_table').DataTable({
            scrollX: true,        // Enable horizontal scrolling
            autoWidth: false,     // Prevent DataTables from setting widths
            responsive: false     // Disable DataTables responsive behavior
        });
        
        $('#autofiltering_table').DataTable();
        
        // Initialize DataTables for FCS-GX tables if they exist
        if ($('#fcsgx_report_table').length) {
            $('#fcsgx_report_table').DataTable({
                scrollX: true,
                autoWidth: false,
                responsive: false,
                pageLength: 25    // Show more rows by default
            });
        }
        
        if ($('#fcsgx_taxonomy_table').length) {
            $('#fcsgx_taxonomy_table').DataTable({
                scrollX: true,
                autoWidth: false,
                responsive: false,
                pageLength: 25    // Show more rows by default
            });
        }
    } );
    </script>
</head>
<body>
    {# Determine which sections have content #}
    {% set has_input_content = (samplesheet_data is defined and samplesheet_data) or (yaml_params_data is defined and yaml_params_data) or (reference_summary is defined and reference_summary) %}
    {% set has_assembly_content = reference_summary is defined and reference_summary %}
    {% set has_barcodes_content = barcodes_check_data is defined and barcodes_check_data and barcodes_check_data != "No barcode check results found." and barcodes_check_data != "PacBio barcode check was not run." %}
    {% set has_fcs_adaptor_content = (fcs_adaptor_euk_report_data is defined and fcs_adaptor_euk_report_data and fcs_adaptor_euk_report_data != "No FCS-Adaptor eukaryotic results found." and fcs_adaptor_euk_report_data != "FCS-Adaptor check was not run." and fcs_adaptor_euk_report_data != "FCS-Adaptor check was run, but no adaptor contamination was detected.") or (fcs_adaptor_prok_report_data is defined and fcs_adaptor_prok_report_data and fcs_adaptor_prok_report_data != "No FCS-Adaptor prokaryotic results found." and fcs_adaptor_prok_report_data != "FCS-Adaptor check was not run." and fcs_adaptor_prok_report_data != "FCS-Adaptor check was run, but no adaptor contamination was detected.") %}
    {# Debug output for fcs_adaptor_data #}
    <script>
        console.log("fcs_adaptor_euk_report_data defined: {{ fcs_adaptor_euk_report_data is defined }}");
        {% if fcs_adaptor_euk_report_data is defined %}
            console.log("fcs_adaptor_euk_report_data: {{ fcs_adaptor_euk_report_data|tojson }}");
        {% endif %}
        console.log("fcs_adaptor_prok_report_data defined: {{ fcs_adaptor_prok_report_data is defined }}");
        {% if fcs_adaptor_prok_report_data is defined %}
            console.log("fcs_adaptor_prok_report_data: {{ fcs_adaptor_prok_report_data|tojson }}");
        {% endif %}
        console.log("has_fcs_adaptor_content: {{ has_fcs_adaptor_content }}");
    </script>
    {% set has_trim_ns_content = trim_Ns_data is defined and trim_Ns_data and trim_Ns_data != "No trim Ns results found." and trim_Ns_data != "Trailing Ns check was not run." and trim_Ns_data != "Trailing Ns check was run, but no issues were found." %}
    {# Debug output for trim_Ns_data #}
    <script>
        console.log("trim_Ns_data defined: {{ trim_Ns_data is defined }}");
        {% if trim_Ns_data is defined %}
            console.log("trim_Ns_data: {{ trim_Ns_data|tojson }}");
        {% endif %}
        console.log("has_trim_ns_content: {{ has_trim_ns_content }}");
    </script>
    {% set has_vecscreen_content = vecscreen_data is defined and vecscreen_data and vecscreen_data != "No vecscreen results found." and vecscreen_data != "VecScreen check was not run." and vecscreen_data != "VecScreen check was run, but no vector contamination was detected." %}
    {# Debug output for vecscreen_data #}
    <script>
        console.log("vecscreen_data defined: {{ vecscreen_data is defined }}");
        {% if vecscreen_data is defined %}
            console.log("vecscreen_data: {{ vecscreen_data|tojson }}");
        {% endif %}
        console.log("has_vecscreen_content: {{ has_vecscreen_content }}");
    </script>
    {% set has_autofiltering_content = autofiltering_data is defined and autofiltering_data and autofiltering_data != "No autofiltering results found." and autofiltering_data != "Autofiltering check was not run." and autofiltering_data != "Autofiltering check was run, but no filtering was performed." %}
    {# Debug output for autofiltering_data #}
    <script>
        console.log("autofiltering_data defined: {{ autofiltering_data is defined }}");
        {% if autofiltering_data is defined %}
            console.log("autofiltering_data: {{ autofiltering_data|tojson }}");
        {% endif %}
        console.log("has_autofiltering_content: {{ has_autofiltering_content }}");
    </script>
    {% set has_coverage_content = coverage_per_phylum_data is defined and coverage_per_phylum_data %}
    {% set has_cobiont_content = contamination_check_merged_table_data is defined and contamination_check_merged_table_data and contamination_check_merged_table_data != "No contamination check merged table found." %}
    {% set has_kmers_content = kmers_results is defined and kmers_results %}
    {# Debug output for kmers_results #}
    <script>
        console.log("kmers_results defined: {{ kmers_results is defined }}");
        {% if kmers_results is defined %}
            console.log("kmers_results empty: {{ not kmers_results }}");
        {% endif %}
        console.log("has_kmers_content: {{ has_kmers_content }}");
    </script>
    {% set has_fasta_sanitation_content = fasta_sanitation_data is defined and fasta_sanitation_data %}
    
    <script>
        // Array to track which tabs should be disabled (empty tabs)
        var emptyTabs = [];
        {% if not has_input_content %}emptyTabs.push(0);{% endif %}
        {% if not has_barcodes_content %}emptyTabs.push(1);{% endif %}
        {% if not has_fcs_adaptor_content %}emptyTabs.push(2);{% endif %}
        {# Disable FCS-GX tab only if all report and taxonomy content are missing/falsy #}
        {% if not (fcs_gx_report_content or fcs_gx_taxonomy_content or fcs_gx_report_metadata or fcs_gx_report_table or fcs_gx_taxonomy_metadata or fcs_gx_taxonomy_table) %}emptyTabs.push(3);{% endif %}
        {% if not has_trim_ns_content %}emptyTabs.push(4);{% endif %}
        {% if not has_vecscreen_content %}emptyTabs.push(5);{% endif %}
        {% if not has_autofiltering_content %}emptyTabs.push(6);{% endif %}
        {% if not has_coverage_content %}emptyTabs.push(7);{% endif %}
        {% if not has_kmers_content %}emptyTabs.push(8);{% endif %}
        {% if not has_cobiont_content %}emptyTabs.push(9);{% endif %}
    </script>
    
    {# Extract assembly component from meta.id if available #}
    {% if meta is defined and meta.id is defined and sample_name is defined %}
        {% set assembly_component = meta.id|replace(sample_name ~ '_', '') %}
    {% else %}
        {% set assembly_component = '' %}
    {% endif %}
    
    <h1>ASCC run report</h1>
    {% if sample_name %}
    <h2 class="subtitle">{{ sample_name }}{% if assembly_component %}, {{ assembly_component }}{% endif %}</h2>
    {% endif %}
    
    <div id="tabs">
        <ul>
            <li><a href="#input-tab">Input</a></li>
            <li><a href="#barcodes-tab">PacBio barcodes</a></li>
            <li><a href="#fcs-adaptor-tab">FCS-adaptor</a></li>
            <li><a href="#fcs-gx-tab">FCS-GX</a></li> {# New FCS-GX Tab Link #}
            <li><a href="#trim-ns-tab">Trailing Ns</a></li>
            <li><a href="#vecscreen-tab">VecScreen</a></li>
            <li><a href="#autofiltering-tab">Autofiltering</a></li>
            <li><a href="#coverage-tab">Coverage</a></li>
            <li><a href="#kmers-tab">K-mer Analysis</a></li>
            <li><a href="#cobiont-tab">Cobiont Check Merged Table</a></li>
        </ul>

        <div id="input-tab">
            <h2>Input Files</h2>
            <p>This section displays the input files and parameters used for the ASCC pipeline run, including the samplesheet, configuration parameters, and assembly statistics. The assembly statistics provide an overview of the genome assembly's size and composition.</p>
            
            {% if samplesheet_data is defined and samplesheet_data %}
                <h3>Input Samplesheet</h3>
                <div class="table-responsive">
                    <div class="table-wrapper">
                        {{ samplesheet_data }}
                    </div>
                </div>
            {% endif %}
            
            {% if yaml_params_data is defined and yaml_params_data %}
                <h3>Input Parameters</h3>
                <div class="table-responsive">
                    <div class="table-wrapper">
                        {{ yaml_params_data }}
                    </div>
                </div>
            {% endif %}
            
            <h3>Assembly Statistics</h3>
            {% if reference_summary %}
                {{ reference_summary }}
            {% else %}
                <p>No assembly statistics available.</p>
            {% endif %}
            
            {% if fasta_sanitation_data %}
                <h3>FASTA Sanitation</h3>
                {{ fasta_sanitation_data.html }}
            {% endif %}
        </div>

        <div id="barcodes-tab">
            <h2>PacBio barcodes check</h2>
            <p>This check uses BlastN to identify retained PacBio multiplexing barcode contamination in the assembly. PacBio barcodes are used to multiplex samples during sequencing, and remnants of these barcodes can sometimes remain in the final assembly. The results show any barcode sequences found in the genome.</p>
            {{ barcodes_check_data }}
        </div>
        
        <div id="fcs-adaptor-tab">
            <h2>FCS-adaptor</h2>
            <p>FCS-adaptor is NCBI software for detecting adapter contamination in genome assemblies. It uses a built-in database of adapter sequences provided by NCBI. The report shows identified potential locations of retained adapter sequences from the sequencing run, which should be removed from the final assembly.</p>
            <h3>Eukaryotic adaptors</h3>
            {{ fcs_adaptor_euk_report_data }}
            <h3>Prokaryotic adaptors</h3>
            {{ fcs_adaptor_prok_report_data }}
        </div>

        <div id="fcs-gx-tab">
            <h2>FCS-GX Reports</h2>
            <p>FCS-GX (Foreign Contamination Screen with cross-species aligner) is NCBI software that detects contaminants in genome assemblies using cross-species alignment. It uses its own database provided by NCBI to identify sequences that may originate from species other than the target organism. The reports show potential contaminant locations and their taxonomic classification.</p>
            
            {# FCS-GX Report Section #}
            <h3>FCS-GX Report ({{ sample_name }}{% if assembly_component %}_{{ assembly_component }}{% endif %}.fcs_gx_report.txt)</h3>
            
            {% if fcs_gx_report_metadata %}
                <h4>Metadata</h4>
                <div class="table-responsive">
                    {{ fcs_gx_report_metadata|safe }}
                </div>
            {% endif %}
            
            {% if fcs_gx_report_table %}
                <h4>Data</h4>
                {{ fcs_gx_report_table|safe }}
            {% elif fcs_gx_report_content and not fcs_gx_report_metadata %}
                {# Fallback to original content if table is not available and metadata is not separately extracted #}
                <pre><code>{{ fcs_gx_report_content }}</code></pre>
            {% elif not fcs_gx_report_content and not fcs_gx_report_table %}
                <p>FCS-GX Report (.fcs_gx_report.txt) not available.</p>
            {% else %}
                <p>No data rows found in the FCS-GX report file.</p>
            {% endif %}

            {# FCS-GX Taxonomy Report Section #}
            <h3>FCS-GX Taxonomy Report ({{ sample_name }}{% if assembly_component %}_{{ assembly_component }}{% endif %}.taxonomy.rpt)</h3>
            
            {% if fcs_gx_taxonomy_metadata %}
                <h4>Metadata</h4>
                <div class="table-responsive">
                    {{ fcs_gx_taxonomy_metadata|safe }}
                </div>
            {% endif %}
            
            {% if fcs_gx_taxonomy_table %}
                <h4>Data</h4>
                {{ fcs_gx_taxonomy_table }}
            {% elif fcs_gx_taxonomy_content %}
                {# Fallback to original content if table is not available #}
                <pre><code>{{ fcs_gx_taxonomy_content }}</code></pre>
            {% else %}
                <p>FCS-GX Taxonomy Report (.taxonomy.rpt) not available.</p>
            {% endif %}
        </div>
        
        <div id="trim-ns-tab">
            <h2>Trimming of trailing Ns</h2>
            <p>Trailing Ns are sequences of N nucleotides (representing unknown bases) that appear at the beginning or end of contigs or scaffolds. This analysis identifies sequences with trailing Ns that should be trimmed from the assembly. If the sequence remaining after trimming is shorter than 200 bp, the script recommends removing it entirely from the assembly.</p>
            {{ trim_Ns_data }}
        </div>
        
        <div id="vecscreen-tab">
            <h2>VecScreen</h2>
            <p>VecScreen is a tool for detecting adapter and vector contamination in genome assemblies. It's an older tool than FCS-adaptor, but its advantage is that it can use a custom database of contaminant sequences made by the user, whereas FCS-adaptor comes with its built-in database. The results show potential vector contaminant locations in the assembly.</p>
            {{ vecscreen_data }}
        </div>
        
        <div id="autofiltering-tab">
            <h2>Autofiltering of the assembly based on FCS-GX and Tiara results</h2>
            <p>Autofiltering produces a decontaminated genome file based on the results of FCS-GX and Tiara analyses. Sequences deemed as contamination by FCS-GX (labeled with the EXCLUDE tag) are removed from the assembly. This section provides summaries of the contamination found and the sequences that were removed during the filtering process.</p>
            {{ autofiltering_data }}
        </div>
        
        <div id="coverage-tab">
            <h2>Coverage per phylum, based on the mapping of PacBio reads to the assembly</h2>
            <p>This analysis maps the read data (typically PacBio HiFi reads) to the input genome using minimap2 and calculates the average coverage per sequence. Coverage information is then aggregated by phylum, which can help identify sequences with abnormal coverage that might represent contamination or cobionts. Sequences from the target organism typically show consistent coverage, while contaminants often have different coverage patterns.</p>
            {{ coverage_per_phylum_data }}
        </div>
        
        <div id="cobiont-tab">
            <h2>Cobiont Check Merged Table</h2>
            <p>This comprehensive table combines results from multiple analyses (GC content, coverage, Tiara, Kraken, k-mer dimensionality reduction, Diamond, BLAST, FCS-GX, BlobToolKit) for each sequence in the input assembly. It provides a phylum-level combined classification of the input sequences, using BlobToolKit's 'bestsum_phylum' first, then filling gaps with results from Tiara and nt Kraken. The 'merged_classif' column shows the classification, while 'merged_classif_source' indicates which tool provided the classification.</p>
            {{ contamination_check_merged_table_data }}
        </div>
        
        <div id="kmers-tab">
            <h2>K-mer Analysis</h2>
            <p>K-mer analysis counts the frequency of short nucleotide sequences (k-mers) in each sequence of the assembly. Dimensionality reduction techniques are then applied to these counts to visualize patterns. Sequences originating from the same species typically cluster together in these visualizations, helping to identify potential contamination or cobionts. Various dimensionality reduction methods (PCA, UMAP, t-SNE, etc.) are available to provide different perspectives on the data.</p>
            
            {% if kmer_length %}
            <p><strong>K-mer length used in this analysis: {{ kmer_length }}</strong></p>
            {% endif %}

        {% if kmers_results %}
            <h3>Dimensionality Reduction Results</h3>
            
            {% set methods = {} %}
            {% for key, value in kmers_results.items() %}
                {% set method_name = key.split('_')[0] %}
                {% if method_name not in methods %}
                    {% set _ = methods.update({method_name: []}) %}
                {% endif %}
                {% set _ = methods[method_name].append(key) %}
            {% endfor %}
            
            <div id="kmer-methods-tabs">
                <ul>
                    {% for method_name, keys in methods.items() %}
                        <li><a href="#kmer-method-{{ method_name }}">{{ method_name|upper }}</a></li>
                    {% endfor %}
                </ul>
                
                {% for method_name, keys in methods.items() %}
                    <div id="kmer-method-{{ method_name }}">
                        <h4 class="method-name">{{ method_name|upper }} Dimensionality Reduction</h4>
                        
                        {# Group metrics by type #}
                        {% set regular_metrics = [] %}
                        {% set clustering_metrics = [] %}
                        {% set visualizations = [] %}
                        
                        {% for key in keys %}
                            {% if key.endswith('_metrics.txt') and not key.endswith('_clustering_metrics.txt') %}
                                {% set _ = regular_metrics.append(key) %}
                            {% elif key.endswith('_clustering_metrics.txt') %}
                                {% set _ = clustering_metrics.append(key) %}
                            {% elif key.endswith('_visualisation.png') %}
                                {% set _ = visualizations.append(key) %}
                            {% endif %}
                        {% endfor %}
                        
                        {# Display regular metrics #}
                        {% if regular_metrics %}
                            <div class="result-section">
                                <h5>{{ method_name|upper }} Metrics</h5>
                                {% for key in regular_metrics %}
                                    {{ kmers_results[key] }}
                                {% endfor %}
                            </div>
                        {% endif %}
                        
                        {# Display clustering metrics #}
                        {% if clustering_metrics %}
                            <div class="result-section">
                                <h5>{{ method_name|upper }} Clustering Metrics</h5>
                                {% for key in clustering_metrics %}
                                    {{ kmers_results[key] }}
                                {% endfor %}
                            </div>
                        {% endif %}
                        
                        {# Display visualizations #}
                        {% for key in visualizations %}
                            <div class="result-section">
                                <h5>{{ method_name|upper }} Visualisation</h5>
                                <div class="visualization-container">
                                    <img class="visualization-image" src="data:image/png;base64,{{ kmers_results[key] }}" alt="{{ method_name }} Visualisation">
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <p>No k-mer analysis results found.</p>
        {% endif %}
        </div>
    </div>
    
    <div class="footer">
        <p>Report generated: {{ timestamp }}</p>
        <p>ASCC Pipeline Version: {{ version }}</p>
    </div>
</body>
</html>
